//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace VikingsGame
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::VikingsGame.VikingsGame_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace VikingsGame.VikingsGame_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[28];
            _typeNameTable[0] = "VikingsGame.MainPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "VikingsGame.View.DebugView";
            _typeNameTable[4] = "VikingsGame.ViewModel.HarborVM";
            _typeNameTable[5] = "VikingsGame.Observable.ObservableObject";
            _typeNameTable[6] = "Object";
            _typeNameTable[7] = "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.Ship>";
            _typeNameTable[8] = "System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Ship>";
            _typeNameTable[9] = "VikingsGame.Model.Ship";
            _typeNameTable[10] = "VikingsGame.Model.Base.RealtimeGameObject";
            _typeNameTable[11] = "VikingsGame.Model.Base.GameObject";
            _typeNameTable[12] = "String";
            _typeNameTable[13] = "VikingsGame.Model.City";
            _typeNameTable[14] = "Int32";
            _typeNameTable[15] = "Double";
            _typeNameTable[16] = "VikingsGame.Model.WarriorGroup";
            _typeNameTable[17] = "System.Collections.Generic.Dictionary`2<String, Double>";
            _typeNameTable[18] = "System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Base.Upgrade>";
            _typeNameTable[19] = "VikingsGame.Model.Base.Upgrade";
            _typeNameTable[20] = "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.Base.Upgrade>";
            _typeNameTable[21] = "System.Windows.Input.ICommand";
            _typeNameTable[22] = "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Other.StatsWorkaround>";
            _typeNameTable[23] = "System.Collections.ObjectModel.Collection`1<VikingsGame.Other.StatsWorkaround>";
            _typeNameTable[24] = "VikingsGame.Other.StatsWorkaround";
            _typeNameTable[25] = "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.City>";
            _typeNameTable[26] = "System.Collections.ObjectModel.Collection`1<VikingsGame.Model.City>";
            _typeNameTable[27] = "VikingsGame.View.HarborView";

            _typeTable = new global::System.Type[28];
            _typeTable[0] = typeof(global::VikingsGame.MainPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::VikingsGame.View.DebugView);
            _typeTable[4] = typeof(global::VikingsGame.ViewModel.HarborVM);
            _typeTable[5] = typeof(global::VikingsGame.Observable.ObservableObject);
            _typeTable[6] = typeof(global::System.Object);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.Ship>);
            _typeTable[8] = typeof(global::System.Collections.ObjectModel.Collection<global::VikingsGame.Model.Ship>);
            _typeTable[9] = typeof(global::VikingsGame.Model.Ship);
            _typeTable[10] = typeof(global::VikingsGame.Model.Base.RealtimeGameObject);
            _typeTable[11] = typeof(global::VikingsGame.Model.Base.GameObject);
            _typeTable[12] = typeof(global::System.String);
            _typeTable[13] = typeof(global::VikingsGame.Model.City);
            _typeTable[14] = typeof(global::System.Int32);
            _typeTable[15] = typeof(global::System.Double);
            _typeTable[16] = typeof(global::VikingsGame.Model.WarriorGroup);
            _typeTable[17] = typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.Double>);
            _typeTable[18] = typeof(global::System.Collections.ObjectModel.Collection<global::VikingsGame.Model.Base.Upgrade>);
            _typeTable[19] = typeof(global::VikingsGame.Model.Base.Upgrade);
            _typeTable[20] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.Base.Upgrade>);
            _typeTable[21] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[22] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Other.StatsWorkaround>);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.Collection<global::VikingsGame.Other.StatsWorkaround>);
            _typeTable[24] = typeof(global::VikingsGame.Other.StatsWorkaround);
            _typeTable[25] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.City>);
            _typeTable[26] = typeof(global::System.Collections.ObjectModel.Collection<global::VikingsGame.Model.City>);
            _typeTable[27] = typeof(global::VikingsGame.View.HarborView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MainPage() { return new global::VikingsGame.MainPage(); }
        private object Activate_3_DebugView() { return new global::VikingsGame.View.DebugView(); }
        private object Activate_4_HarborVM() { return new global::VikingsGame.ViewModel.HarborVM(); }
        private object Activate_5_ObservableObject() { return new global::VikingsGame.Observable.ObservableObject(); }
        private object Activate_7_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.Ship>(); }
        private object Activate_8_Collection() { return new global::System.Collections.ObjectModel.Collection<global::VikingsGame.Model.Ship>(); }
        private object Activate_11_GameObject() { return new global::VikingsGame.Model.Base.GameObject(); }
        private object Activate_17_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Double>(); }
        private object Activate_18_Collection() { return new global::System.Collections.ObjectModel.Collection<global::VikingsGame.Model.Base.Upgrade>(); }
        private object Activate_20_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.Base.Upgrade>(); }
        private object Activate_22_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Other.StatsWorkaround>(); }
        private object Activate_23_Collection() { return new global::System.Collections.ObjectModel.Collection<global::VikingsGame.Other.StatsWorkaround>(); }
        private object Activate_24_StatsWorkaround() { return new global::VikingsGame.Other.StatsWorkaround(); }
        private object Activate_25_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.City>(); }
        private object Activate_26_Collection() { return new global::System.Collections.ObjectModel.Collection<global::VikingsGame.Model.City>(); }
        private object Activate_27_HarborView() { return new global::VikingsGame.View.HarborView(); }
        private void VectorAdd_7_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VikingsGame.Model.Ship>)instance;
            var newItem = (global::VikingsGame.Model.Ship)item;
            collection.Add(newItem);
        }
        private void VectorAdd_8_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VikingsGame.Model.Ship>)instance;
            var newItem = (global::VikingsGame.Model.Ship)item;
            collection.Add(newItem);
        }
        private void MapAdd_17_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Double>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Double)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_18_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VikingsGame.Model.Base.Upgrade>)instance;
            var newItem = (global::VikingsGame.Model.Base.Upgrade)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VikingsGame.Model.Base.Upgrade>)instance;
            var newItem = (global::VikingsGame.Model.Base.Upgrade)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VikingsGame.Other.StatsWorkaround>)instance;
            var newItem = (global::VikingsGame.Other.StatsWorkaround)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VikingsGame.Other.StatsWorkaround>)instance;
            var newItem = (global::VikingsGame.Other.StatsWorkaround)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VikingsGame.Model.City>)instance;
            var newItem = (global::VikingsGame.Model.City)item;
            collection.Add(newItem);
        }
        private void VectorAdd_26_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::VikingsGame.Model.City>)instance;
            var newItem = (global::VikingsGame.Model.City)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::VikingsGame.VikingsGame_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  VikingsGame.MainPage
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  VikingsGame.View.DebugView
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_DebugView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  VikingsGame.ViewModel.HarborVM
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("VikingsGame.Observable.ObservableObject"));
                userType.Activator = Activate_4_HarborVM;
                userType.AddMemberName("Ships");
                userType.AddMemberName("SelectedShip");
                userType.AddMemberName("AvailableUpgrades");
                userType.AddMemberName("BuiltUpgrades");
                userType.AddMemberName("BuildUpgradeClick");
                userType.AddMemberName("SAvailableUpgrade");
                userType.AddMemberName("SBuiltUpgrade");
                userType.AddMemberName("UpgradeStats");
                userType.AddMemberName("Stats");
                userType.AddMemberName("Cities");
                userType.AddMemberName("SelectedCity");
                userType.AddMemberName("SailToClick");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  VikingsGame.Observable.ObservableObject
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_ObservableObject;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Object
                xamlType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.Ship>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Ship>"));
                userType.CollectionAdd = VectorAdd_7_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Ship>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_Collection;
                userType.CollectionAdd = VectorAdd_8_Collection;
                xamlType = userType;
                break;

            case 9:   //  VikingsGame.Model.Ship
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("VikingsGame.Model.Base.RealtimeGameObject"));
                userType.AddMemberName("Name");
                userType.AddMemberName("DestinationCity");
                userType.AddMemberName("Id");
                userType.AddMemberName("FactionId");
                userType.AddMemberName("TravelRemain");
                userType.AddMemberName("Units");
                userType.AddMemberName("TravelDescription");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  VikingsGame.Model.Base.RealtimeGameObject
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("VikingsGame.Model.Base.GameObject"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  VikingsGame.Model.Base.GameObject
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("VikingsGame.Observable.ObservableObject"));
                userType.Activator = Activate_11_GameObject;
                userType.AddMemberName("Stats");
                userType.AddMemberName("AvailableUpgrades");
                userType.AddMemberName("BuiltUpgrades");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  String
                xamlType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  VikingsGame.Model.City
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("VikingsGame.Model.Base.RealtimeGameObject"));
                userType.AddMemberName("Cash");
                userType.AddMemberName("Id");
                userType.AddMemberName("FactionId");
                userType.AddMemberName("Level");
                userType.AddMemberName("Name");
                userType.AddMemberName("WarriorsAvailable");
                userType.AddMemberName("Units");
                userType.AddMemberName("Ships");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Int32
                xamlType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Double
                xamlType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  VikingsGame.Model.WarriorGroup
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("VikingsGame.Model.Base.GameObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  System.Collections.Generic.Dictionary`2<String, Double>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_17_Dictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Base.Upgrade>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_18_Collection;
                userType.CollectionAdd = VectorAdd_18_Collection;
                xamlType = userType;
                break;

            case 19:   //  VikingsGame.Model.Base.Upgrade
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Stats");
                userType.AddMemberName("Name");
                userType.AddMemberName("Id");
                userType.AddMemberName("Price");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.Base.Upgrade>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Base.Upgrade>"));
                userType.CollectionAdd = VectorAdd_20_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  System.Windows.Input.ICommand
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Other.StatsWorkaround>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<VikingsGame.Other.StatsWorkaround>"));
                userType.CollectionAdd = VectorAdd_22_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.Collection`1<VikingsGame.Other.StatsWorkaround>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_Collection;
                userType.CollectionAdd = VectorAdd_23_Collection;
                xamlType = userType;
                break;

            case 24:   //  VikingsGame.Other.StatsWorkaround
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_StatsWorkaround;
                userType.AddMemberName("Key");
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.City>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<VikingsGame.Model.City>"));
                userType.CollectionAdd = VectorAdd_25_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  System.Collections.ObjectModel.Collection`1<VikingsGame.Model.City>
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_26_Collection;
                userType.CollectionAdd = VectorAdd_26_Collection;
                xamlType = userType;
                break;

            case 27:   //  VikingsGame.View.HarborView
                userType = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_HarborView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_HarborVM_Ships(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.Ships;
        }
        private void set_0_HarborVM_Ships(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.Ships = (global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.Ship>)Value;
        }
        private object get_1_Ship_Name(object instance)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            return that.Name;
        }
        private void set_1_Ship_Name(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_2_Ship_DestinationCity(object instance)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            return that.DestinationCity;
        }
        private void set_2_Ship_DestinationCity(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            that.DestinationCity = (global::VikingsGame.Model.City)Value;
        }
        private object get_3_Ship_Id(object instance)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            return that.Id;
        }
        private void set_3_Ship_Id(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            that.Id = (global::System.Int32)Value;
        }
        private object get_4_Ship_FactionId(object instance)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            return that.FactionId;
        }
        private void set_4_Ship_FactionId(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            that.FactionId = (global::System.Int32)Value;
        }
        private object get_5_Ship_TravelRemain(object instance)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            return that.TravelRemain;
        }
        private void set_5_Ship_TravelRemain(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            that.TravelRemain = (global::System.Double)Value;
        }
        private object get_6_Ship_Units(object instance)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            return that.Units;
        }
        private void set_6_Ship_Units(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            that.Units = (global::VikingsGame.Model.WarriorGroup)Value;
        }
        private object get_7_Ship_TravelDescription(object instance)
        {
            var that = (global::VikingsGame.Model.Ship)instance;
            return that.TravelDescription;
        }
        private object get_8_GameObject_Stats(object instance)
        {
            var that = (global::VikingsGame.Model.Base.GameObject)instance;
            return that.Stats;
        }
        private object get_9_GameObject_AvailableUpgrades(object instance)
        {
            var that = (global::VikingsGame.Model.Base.GameObject)instance;
            return that.AvailableUpgrades;
        }
        private void set_9_GameObject_AvailableUpgrades(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Base.GameObject)instance;
            that.AvailableUpgrades = (global::System.Collections.ObjectModel.Collection<global::VikingsGame.Model.Base.Upgrade>)Value;
        }
        private object get_10_Upgrade_Stats(object instance)
        {
            var that = (global::VikingsGame.Model.Base.Upgrade)instance;
            return that.Stats;
        }
        private void set_10_Upgrade_Stats(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Base.Upgrade)instance;
            that.Stats = (global::System.Collections.Generic.Dictionary<global::System.String, global::System.Double>)Value;
        }
        private object get_11_Upgrade_Name(object instance)
        {
            var that = (global::VikingsGame.Model.Base.Upgrade)instance;
            return that.Name;
        }
        private void set_11_Upgrade_Name(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Base.Upgrade)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_12_Upgrade_Id(object instance)
        {
            var that = (global::VikingsGame.Model.Base.Upgrade)instance;
            return that.Id;
        }
        private object get_13_Upgrade_Price(object instance)
        {
            var that = (global::VikingsGame.Model.Base.Upgrade)instance;
            return that.Price;
        }
        private void set_13_Upgrade_Price(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.Base.Upgrade)instance;
            that.Price = (global::System.Double)Value;
        }
        private object get_14_GameObject_BuiltUpgrades(object instance)
        {
            var that = (global::VikingsGame.Model.Base.GameObject)instance;
            return that.BuiltUpgrades;
        }
        private object get_15_HarborVM_SelectedShip(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.SelectedShip;
        }
        private void set_15_HarborVM_SelectedShip(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.SelectedShip = (global::VikingsGame.Model.Ship)Value;
        }
        private object get_16_HarborVM_AvailableUpgrades(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.AvailableUpgrades;
        }
        private void set_16_HarborVM_AvailableUpgrades(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.AvailableUpgrades = (global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.Base.Upgrade>)Value;
        }
        private object get_17_HarborVM_BuiltUpgrades(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.BuiltUpgrades;
        }
        private void set_17_HarborVM_BuiltUpgrades(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.BuiltUpgrades = (global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.Base.Upgrade>)Value;
        }
        private object get_18_HarborVM_BuildUpgradeClick(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.BuildUpgradeClick;
        }
        private object get_19_HarborVM_SAvailableUpgrade(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.SAvailableUpgrade;
        }
        private void set_19_HarborVM_SAvailableUpgrade(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.SAvailableUpgrade = (global::VikingsGame.Model.Base.Upgrade)Value;
        }
        private object get_20_HarborVM_SBuiltUpgrade(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.SBuiltUpgrade;
        }
        private void set_20_HarborVM_SBuiltUpgrade(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.SBuiltUpgrade = (global::VikingsGame.Model.Base.Upgrade)Value;
        }
        private object get_21_HarborVM_UpgradeStats(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.UpgradeStats;
        }
        private void set_21_HarborVM_UpgradeStats(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.UpgradeStats = (global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Other.StatsWorkaround>)Value;
        }
        private object get_22_StatsWorkaround_Key(object instance)
        {
            var that = (global::VikingsGame.Other.StatsWorkaround)instance;
            return that.Key;
        }
        private void set_22_StatsWorkaround_Key(object instance, object Value)
        {
            var that = (global::VikingsGame.Other.StatsWorkaround)instance;
            that.Key = (global::System.String)Value;
        }
        private object get_23_StatsWorkaround_Value(object instance)
        {
            var that = (global::VikingsGame.Other.StatsWorkaround)instance;
            return that.Value;
        }
        private void set_23_StatsWorkaround_Value(object instance, object Value)
        {
            var that = (global::VikingsGame.Other.StatsWorkaround)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_24_HarborVM_Stats(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.Stats;
        }
        private void set_24_HarborVM_Stats(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.Stats = (global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Other.StatsWorkaround>)Value;
        }
        private object get_25_HarborVM_Cities(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.Cities;
        }
        private void set_25_HarborVM_Cities(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.Cities = (global::System.Collections.ObjectModel.ObservableCollection<global::VikingsGame.Model.City>)Value;
        }
        private object get_26_City_Cash(object instance)
        {
            var that = (global::VikingsGame.Model.City)instance;
            return that.Cash;
        }
        private void set_26_City_Cash(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.City)instance;
            that.Cash = (global::System.Double)Value;
        }
        private object get_27_City_Id(object instance)
        {
            var that = (global::VikingsGame.Model.City)instance;
            return that.Id;
        }
        private object get_28_City_FactionId(object instance)
        {
            var that = (global::VikingsGame.Model.City)instance;
            return that.FactionId;
        }
        private object get_29_City_Level(object instance)
        {
            var that = (global::VikingsGame.Model.City)instance;
            return that.Level;
        }
        private object get_30_City_Name(object instance)
        {
            var that = (global::VikingsGame.Model.City)instance;
            return that.Name;
        }
        private object get_31_City_WarriorsAvailable(object instance)
        {
            var that = (global::VikingsGame.Model.City)instance;
            return that.WarriorsAvailable;
        }
        private object get_32_City_Units(object instance)
        {
            var that = (global::VikingsGame.Model.City)instance;
            return that.Units;
        }
        private void set_32_City_Units(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.City)instance;
            that.Units = (global::VikingsGame.Model.WarriorGroup)Value;
        }
        private object get_33_City_Ships(object instance)
        {
            var that = (global::VikingsGame.Model.City)instance;
            return that.Ships;
        }
        private void set_33_City_Ships(object instance, object Value)
        {
            var that = (global::VikingsGame.Model.City)instance;
            that.Ships = (global::System.Collections.ObjectModel.Collection<global::VikingsGame.Model.Ship>)Value;
        }
        private object get_34_HarborVM_SelectedCity(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.SelectedCity;
        }
        private void set_34_HarborVM_SelectedCity(object instance, object Value)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            that.SelectedCity = (global::VikingsGame.Model.City)Value;
        }
        private object get_35_HarborVM_SailToClick(object instance)
        {
            var that = (global::VikingsGame.ViewModel.HarborVM)instance;
            return that.SailToClick;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember xamlMember = null;
            global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "VikingsGame.ViewModel.HarborVM.Ships":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Ships", "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.Ship>");
                xamlMember.Getter = get_0_HarborVM_Ships;
                xamlMember.Setter = set_0_HarborVM_Ships;
                break;
            case "VikingsGame.Model.Ship.Name":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Ship");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_1_Ship_Name;
                xamlMember.Setter = set_1_Ship_Name;
                break;
            case "VikingsGame.Model.Ship.DestinationCity":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Ship");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "DestinationCity", "VikingsGame.Model.City");
                xamlMember.Getter = get_2_Ship_DestinationCity;
                xamlMember.Setter = set_2_Ship_DestinationCity;
                break;
            case "VikingsGame.Model.Ship.Id":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Ship");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_3_Ship_Id;
                xamlMember.Setter = set_3_Ship_Id;
                break;
            case "VikingsGame.Model.Ship.FactionId":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Ship");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "FactionId", "Int32");
                xamlMember.Getter = get_4_Ship_FactionId;
                xamlMember.Setter = set_4_Ship_FactionId;
                break;
            case "VikingsGame.Model.Ship.TravelRemain":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Ship");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "TravelRemain", "Double");
                xamlMember.Getter = get_5_Ship_TravelRemain;
                xamlMember.Setter = set_5_Ship_TravelRemain;
                break;
            case "VikingsGame.Model.Ship.Units":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Ship");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Units", "VikingsGame.Model.WarriorGroup");
                xamlMember.Getter = get_6_Ship_Units;
                xamlMember.Setter = set_6_Ship_Units;
                break;
            case "VikingsGame.Model.Ship.TravelDescription":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Ship");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "TravelDescription", "String");
                xamlMember.Getter = get_7_Ship_TravelDescription;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.Model.Base.GameObject.Stats":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Base.GameObject");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Stats", "System.Collections.Generic.Dictionary`2<String, Double>");
                xamlMember.Getter = get_8_GameObject_Stats;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.Model.Base.GameObject.AvailableUpgrades":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Base.GameObject");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "AvailableUpgrades", "System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Base.Upgrade>");
                xamlMember.Getter = get_9_GameObject_AvailableUpgrades;
                xamlMember.Setter = set_9_GameObject_AvailableUpgrades;
                break;
            case "VikingsGame.Model.Base.Upgrade.Stats":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Base.Upgrade");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Stats", "System.Collections.Generic.Dictionary`2<String, Double>");
                xamlMember.Getter = get_10_Upgrade_Stats;
                xamlMember.Setter = set_10_Upgrade_Stats;
                break;
            case "VikingsGame.Model.Base.Upgrade.Name":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Base.Upgrade");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_11_Upgrade_Name;
                xamlMember.Setter = set_11_Upgrade_Name;
                break;
            case "VikingsGame.Model.Base.Upgrade.Id":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Base.Upgrade");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_12_Upgrade_Id;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.Model.Base.Upgrade.Price":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Base.Upgrade");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Price", "Double");
                xamlMember.Getter = get_13_Upgrade_Price;
                xamlMember.Setter = set_13_Upgrade_Price;
                break;
            case "VikingsGame.Model.Base.GameObject.BuiltUpgrades":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.Base.GameObject");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "BuiltUpgrades", "System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Base.Upgrade>");
                xamlMember.Getter = get_14_GameObject_BuiltUpgrades;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.ViewModel.HarborVM.SelectedShip":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "SelectedShip", "VikingsGame.Model.Ship");
                xamlMember.Getter = get_15_HarborVM_SelectedShip;
                xamlMember.Setter = set_15_HarborVM_SelectedShip;
                break;
            case "VikingsGame.ViewModel.HarborVM.AvailableUpgrades":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "AvailableUpgrades", "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.Base.Upgrade>");
                xamlMember.Getter = get_16_HarborVM_AvailableUpgrades;
                xamlMember.Setter = set_16_HarborVM_AvailableUpgrades;
                break;
            case "VikingsGame.ViewModel.HarborVM.BuiltUpgrades":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "BuiltUpgrades", "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.Base.Upgrade>");
                xamlMember.Getter = get_17_HarborVM_BuiltUpgrades;
                xamlMember.Setter = set_17_HarborVM_BuiltUpgrades;
                break;
            case "VikingsGame.ViewModel.HarborVM.BuildUpgradeClick":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "BuildUpgradeClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_18_HarborVM_BuildUpgradeClick;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.ViewModel.HarborVM.SAvailableUpgrade":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "SAvailableUpgrade", "VikingsGame.Model.Base.Upgrade");
                xamlMember.Getter = get_19_HarborVM_SAvailableUpgrade;
                xamlMember.Setter = set_19_HarborVM_SAvailableUpgrade;
                break;
            case "VikingsGame.ViewModel.HarborVM.SBuiltUpgrade":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "SBuiltUpgrade", "VikingsGame.Model.Base.Upgrade");
                xamlMember.Getter = get_20_HarborVM_SBuiltUpgrade;
                xamlMember.Setter = set_20_HarborVM_SBuiltUpgrade;
                break;
            case "VikingsGame.ViewModel.HarborVM.UpgradeStats":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "UpgradeStats", "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Other.StatsWorkaround>");
                xamlMember.Getter = get_21_HarborVM_UpgradeStats;
                xamlMember.Setter = set_21_HarborVM_UpgradeStats;
                break;
            case "VikingsGame.Other.StatsWorkaround.Key":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Other.StatsWorkaround");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Key", "String");
                xamlMember.Getter = get_22_StatsWorkaround_Key;
                xamlMember.Setter = set_22_StatsWorkaround_Key;
                break;
            case "VikingsGame.Other.StatsWorkaround.Value":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Other.StatsWorkaround");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.Getter = get_23_StatsWorkaround_Value;
                xamlMember.Setter = set_23_StatsWorkaround_Value;
                break;
            case "VikingsGame.ViewModel.HarborVM.Stats":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Stats", "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Other.StatsWorkaround>");
                xamlMember.Getter = get_24_HarborVM_Stats;
                xamlMember.Setter = set_24_HarborVM_Stats;
                break;
            case "VikingsGame.ViewModel.HarborVM.Cities":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Cities", "System.Collections.ObjectModel.ObservableCollection`1<VikingsGame.Model.City>");
                xamlMember.Getter = get_25_HarborVM_Cities;
                xamlMember.Setter = set_25_HarborVM_Cities;
                break;
            case "VikingsGame.Model.City.Cash":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.City");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Cash", "Double");
                xamlMember.Getter = get_26_City_Cash;
                xamlMember.Setter = set_26_City_Cash;
                break;
            case "VikingsGame.Model.City.Id":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.City");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_27_City_Id;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.Model.City.FactionId":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.City");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "FactionId", "Int32");
                xamlMember.Getter = get_28_City_FactionId;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.Model.City.Level":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.City");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Level", "Int32");
                xamlMember.Getter = get_29_City_Level;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.Model.City.Name":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.City");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_30_City_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.Model.City.WarriorsAvailable":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.City");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "WarriorsAvailable", "Double");
                xamlMember.Getter = get_31_City_WarriorsAvailable;
                xamlMember.SetIsReadOnly();
                break;
            case "VikingsGame.Model.City.Units":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.City");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Units", "VikingsGame.Model.WarriorGroup");
                xamlMember.Getter = get_32_City_Units;
                xamlMember.Setter = set_32_City_Units;
                break;
            case "VikingsGame.Model.City.Ships":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.Model.City");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "Ships", "System.Collections.ObjectModel.Collection`1<VikingsGame.Model.Ship>");
                xamlMember.Getter = get_33_City_Ships;
                xamlMember.Setter = set_33_City_Ships;
                break;
            case "VikingsGame.ViewModel.HarborVM.SelectedCity":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "SelectedCity", "VikingsGame.Model.City");
                xamlMember.Getter = get_34_HarborVM_SelectedCity;
                xamlMember.Setter = set_34_HarborVM_SelectedCity;
                break;
            case "VikingsGame.ViewModel.HarborVM.SailToClick":
                userType = (global::VikingsGame.VikingsGame_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VikingsGame.ViewModel.HarborVM");
                xamlMember = new global::VikingsGame.VikingsGame_XamlTypeInfo.XamlMember(this, "SailToClick", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_35_HarborVM_SailToClick;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::VikingsGame.VikingsGame_XamlTypeInfo.XamlSystemBaseType
    {
        global::VikingsGame.VikingsGame_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::VikingsGame.VikingsGame_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::VikingsGame.VikingsGame_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::VikingsGame.VikingsGame_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


